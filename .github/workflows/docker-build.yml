name: Docker Build & Push

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Create production Dockerfile
      run: |
        cat > back-end/Dockerfile.prod << 'EOF'
        FROM python:3.11-slim as base

        # Install system dependencies
        RUN apt-get update && apt-get install -y --no-install-recommends \
            gcc \
            && rm -rf /var/lib/apt/lists/*

        # Create non-root user
        RUN groupadd -r appuser && useradd -r -g appuser appuser

        # Set working directory
        WORKDIR /app

        # Copy requirements and install dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir --upgrade pip && \
            pip install --no-cache-dir -r requirements.txt && \
            pip install --no-cache-dir gunicorn

        # Copy application code
        COPY . .

        # Remove development files
        RUN rm -f .env* && \
            rm -f Dockerfile.dev && \
            find . -name "*.pyc" -delete && \
            find . -name "__pycache__" -delete

        # Set ownership
        RUN chown -R appuser:appuser /app

        # Switch to non-root user
        USER appuser

        # Expose port
        EXPOSE 5000

        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
            CMD curl -f http://localhost:5000/api/health || exit 1

        # Start application
        CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "2", "--threads", "2", "--timeout", "60", "app:app"]
        EOF

    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./back-end
        file: ./back-end/Dockerfile.prod
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: front-end/web/package-lock.json

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Install dependencies
      working-directory: front-end/web
      run: npm ci

    - name: Build for production
      working-directory: front-end/web
      run: |
        npx expo install --fix
        npx expo export -p web --output-dir dist

    - name: Create production Dockerfile
      run: |
        cat > front-end/web/Dockerfile.prod << 'EOF'
        FROM nginx:alpine

        # Copy built files
        COPY dist /usr/share/nginx/html

        # Copy nginx configuration
        COPY nginx.conf /etc/nginx/conf.d/default.conf

        # Create nginx config if not exists
        RUN if [ ! -f /etc/nginx/conf.d/default.conf ]; then \
            echo 'server {' > /etc/nginx/conf.d/default.conf && \
            echo '    listen 80;' >> /etc/nginx/conf.d/default.conf && \
            echo '    server_name _;' >> /etc/nginx/conf.d/default.conf && \
            echo '    location / {' >> /etc/nginx/conf.d/default.conf && \
            echo '        root /usr/share/nginx/html;' >> /etc/nginx/conf.d/default.conf && \
            echo '        index index.html;' >> /etc/nginx/conf.d/default.conf && \
            echo '        try_files $uri $uri/ /index.html;' >> /etc/nginx/conf.d/default.conf && \
            echo '    }' >> /etc/nginx/conf.d/default.conf && \
            echo '}' >> /etc/nginx/conf.d/default.conf; \
        fi

        # Health check
        HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD curl -f http://localhost/ || exit 1

        EXPOSE 80
        CMD ["nginx", "-g", "daemon off;"]
        EOF

    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./front-end/web
        file: ./front-end/web/Dockerfile.prod
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write

    strategy:
      matrix:
        image: [backend, frontend]

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.image }}:latest'
        format: 'sarif'
        output: 'trivy-results-${{ matrix.image }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-${{ matrix.image }}.sarif'