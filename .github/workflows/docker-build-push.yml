# .github/workflows/docker-build-push.yml
name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'back-end/**'
  pull_request:
    branches:
      - main
    paths:
      - 'back-end/**'
  workflow_dispatch:

env:
  REGISTRY: docker.io
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: Prod
    
    strategy:
      matrix:
        service:
          - name: api-estudiantes
            context: back-end/api_estudiantes
            dockerfile: back-end/api_estudiantes/Dockerfile
            image_name: acceso-api-estudiantes
          - name: lector-qr
            context: back-end/lector
            dockerfile: back-end/lector/Dockerfile
            image_name: acceso-lector-qr
          - name: web-api
            context: back-end/web
            dockerfile: back-end/web/Dockerfile
            image_name: acceso-web-api

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Check if Dockerfile exists
        run: |
          if [ ! -f "${{ matrix.service.dockerfile }}" ]; then
            echo "Creating Dockerfile for ${{ matrix.service.name }}"
            mkdir -p $(dirname "${{ matrix.service.dockerfile }}")
            
            case "${{ matrix.service.name }}" in
              "api-estudiantes")
                cat > "${{ matrix.service.dockerfile }}" << 'EOF'
          FROM python:3.11-slim

          # Metadatos
          LABEL maintainer="acceso.informaticauaint.com"
          LABEL description="API Estudiantes para sistema de acceso"

          # Variables de entorno
          ENV PYTHONDONTWRITEBYTECODE=1 \
              PYTHONUNBUFFERED=1 \
              FLASK_APP=app.py \
              FLASK_ENV=production

          # Instalar dependencias del sistema
          RUN apt-get update && apt-get install -y \
              gcc \
              && rm -rf /var/lib/apt/lists/*

          # Crear usuario no-root
          RUN groupadd -r appuser && useradd -r -g appuser appuser

          # Crear directorio de trabajo
          WORKDIR /app

          # Copiar archivos de dependencias
          COPY requirements.txt .

          # Instalar dependencias de Python
          RUN pip install --no-cache-dir --upgrade pip && \
              pip install --no-cache-dir -r requirements.txt

          # Copiar código fuente
          COPY . .

          # Cambiar propietario de archivos
          RUN chown -R appuser:appuser /app

          # Cambiar a usuario no-root
          USER appuser

          # Exponer puerto
          EXPOSE 5000

          # Comando de salud
          HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
              CMD python -c "import requests; requests.get('http://localhost:5000/api/health')" || exit 1

          # Comando por defecto
          CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "2", "--timeout", "60", "app:app"]
          EOF
                ;;
            esac
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate image summary
        if: github.event_name != 'pull_request'
        run: |
          echo "## Docker Image Built: ${{ matrix.service.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ matrix.service.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service.image_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    environment: Prod
    
    strategy:
      matrix:
        service:
          - acceso-api-estudiantes
          - acceso-lector-qr
          - acceso-web-api

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: Prod

    steps:
      - name: Deployment notification
        run: |
          echo "## 🚀 Deployment Ready" >> $GITHUB_STEP_SUMMARY
          echo "Las siguientes imágenes han sido construidas y están listas para despliegue:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Imágenes Docker disponibles:" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.DOCKERHUB_USERNAME }}/acceso-api-estudiantes:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.DOCKERHUB_USERNAME }}/acceso-lector-qr:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.DOCKERHUB_USERNAME }}/acceso-web-api:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Comandos para desplegar:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.DOCKERHUB_USERNAME }}/acceso-api-estudiantes:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.DOCKERHUB_USERNAME }}/acceso-lector-qr:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.DOCKERHUB_USERNAME }}/acceso-web-api:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
