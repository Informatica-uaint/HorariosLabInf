name: Build and Deploy Docker Stack

on:
  push:
    branches: [main]

jobs:
  build-web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: front-end
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        
    - name: Install dependencies
      run: npm install
      
    - name: Install Expo CLI
      run: npm install -g expo-cli
      
    - name: Export Expo Web (modern bundler)
      run: npx expo export --platform web
      
    - name: Upload web build (dist/) as artifact
      uses: actions/upload-artifact@v4
      with:
        name: expo-web-dist
        path: front-end/dist
        retention-days: 1

  deploy-docker:
    needs: build-web
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      
    - name: Download web build artifact
      uses: actions/download-artifact@v4
      with:
        name: expo-web-dist
        path: ./web-dist
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # Construir y publicar la imagen de la web
    - name: Build and push web image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./web.Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/web-app:latest
    
    # Construir y publicar la imagen de la API
    - name: Build and push API image
      uses: docker/build-push-action@v4
      with:
        context: ./back-end
        file: ./api.Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/api:latest
    
    # Crear docker-compose.yml para el stack
    - name: Create docker-compose.yml
      run: |
        cat > docker-compose.yml << 'EOL'
        version: '3.8'
        services:
          web:
            image: ${{ secrets.DOCKERHUB_USERNAME }}/web-app:latest
            ports:
              - "80:80"
            restart: always
          
          api:
            image: ${{ secrets.DOCKERHUB_USERNAME }}/api:latest
            ports:
              - "443:443"
            restart: always
        EOL
      
    # Opcional: Desplegar en un servidor
    - name: Deploy to remote server
      if: ${{ secrets.DEPLOY_TO_SERVER == 'true' }}
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          mkdir -p /opt/horarioslab
          cd /opt/horarioslab
          
          # Descargar el archivo docker-compose.yml
          echo '${{ github.workspace }}/docker-compose.yml' > docker-compose.yml
          
          # Pull nuevas im√°genes y reiniciar servicios
          docker-compose pull
          docker-compose up -d
